*vimfu.txt* Personal Vim help

                 Per Juchtmans <https://dubgeiser.github.io>
                        WTFPL <http://www.wtfpl.net/>

==============================================================================
VIMFU                                                               *vimfu*

Using the Vim help system to keep track of my own personal Vim tips.

Based on http://djcraven5.blogspot.com/2006/10/mastering-vim-help-system.html


                                         *vimfu-autocomplete* *vimfu-complete*
<C-X><C-L>      Complete full line.
<C-X><C-K>      Complete from dictionary. (Only works with `:set spell`)


                                                               *vimfu-buffers*
:w !sudo tee %  Write buffer when opened without sudo
                (note: This can now be done with `:SudoWrite` from Tim Pope's
                |eunuch| plugin)


                                                             *vimfu-registers*
<c-r>=          [insert mode] Go to expression register, expression will be
                evaluated and its result will be inserted on the current
                cursor position.


                                                   *vimfu-insert* *vimfu-edit*
<C-R>"          Paste clipboard in insert mode.
gJ              Join lines without inserting a space


                                              i                     *vimfu-ex*
@:              Repeat last ex command.  Subsequent repeats can be done with
                `@@`


                                                                 *vimfu-folds*
zf              Create a fold (follows normal movements, so zf20j creates fold
                over the next 20 lines down).  zf in visual will create a fold
                for that selection, and so on.
zo              Open fold
zd              Delete the fold the cursor is in.  This does not delete
                underlying, nested folds.
zD              Delete folds recursively.  This will delete underlying nested
                folds.
zE              Delete all folds in document.
zM              Close all open folds.
zR              Open all folds.


                                                                  *vimfu-help*
:helpgrep       Search help with a regex
K               To man page of word under cursor. (This is now mapped to <nop>)
C-$             Jump to tag (normally C-] but that doesn't do it on AZERTY)
C-T             Back from tag jump


                                                                  *vimfu-info*
ga              Show ascii, hex and octal value of char under cursor
c-g             Full name of file, how many line, whether it is modified, ...
gc-g            Detailed info on position in file


                                                                  *vimfu-move*
[[              Previous function / class declaration. (only class in Python)
]]              Next function / class declaration. (only class in Python)
[{              Beginning of block (no go in Python)
]}              End of current block (no go in Python)
''              To the last place you were.
`.              To the line you have last edited.
g_              To the last non-blank character of the line.
                Handy for when in visual mode and want to select to the end of
                the line, but leave out the line ending.
gn              Like 'n' for going to the next search pattern, but also start
                Visual mode to select the match (will be visual when on the
                match itself).  If combined with an operator; operates on the
                match; ex: "dgn" deletes text of next match.
                Handy to use with regex search and/or '.' operator.

In |vimdiff| (and thus |fugitive-:Gdiff|):
]c              Move to the next change in a diff
[c              Move to the previous change in a diff


                                                   *vimfu-find* *vimfu-search*
:g/SE/#         Find occurrences of SE and list them in command buffer with lines
                numbered.
&               Repeat substitution (ex. when g is forgotten in :s/foo/bar)
<c-g>           In search mode (`/`) go to the next match
<c-t>           In search mode (`/`) go to the previous match


                                                          *vimfu-spellchecker*
These options only work when spell checking is on (:set spell)

[s              Go to the beginning of the previous spelling error
]s              Go to the beginning of the next spelling error


                                                              *vimfu-surround*
Surrounding stuff (ie. text objects/movements) is done via the |surround.txt|
plugin.
If surrounding with [{(, use closing version, the opening char will padd the
surrounding with a space.

cs<C1><C2>      Change surrounding char <C1> to char <C2>
cst<C>          Change surrounding tag (<tag>) with char <C>
ds<C>           Delete surrounding chars <C>
dst             Delete surrounding html tag.
S<C>            Surround selection with char <C> (Visual mode)


                                                  *vimfu-input* *vimfu-prompt*
:let a = input('A: ')           Get input from user on command line
:let a = inputdialog('A')       Get input from user in a graphical ui dialog.
:let a = confirm("ok?", "&OK\n&Cancel")  Get input from prompt with buttons.


                                                               *vimfu-windows*
:only           Close all windows except current
<c-w><c-o>      Close all windows except current
<c-w>H,J,K,L    Move current buffer to the left,down,up,right
<c-w>=          Distribute windows equally over the screen.


                                                           *vimfu-programming*
Loads of stuff in the vim-OPL book (ex: chapters 26, 27 and more), also check
help on functions, variables, script(s), :h usr_41.txt
Neat state machine system:

    execute {
        \ '00': 'set relativenumber   | set number',
        \ '01': 'set norelativenumber | set number',
        \ '10': 'set norelativenumber | set nonumber',
        \ '11': 'set norelativenumber | set number' }[&number .  &relativenumber]

IBM has a nice (but old) resource on scripting Vim:
https://www.ibm.com/developerworks/linux/library/l-vim-script-2/

Interpret output of an external script as Vim commands:

    :exec(system('/path/to/script'))


                                                           *vimfu-commandline*
C-F             In command line mode: take current edit and take that to a
                buffer for further 'full' editing.


                                                      *vimfu-file* *vimfu-dir*
:!mkdir %:p:h   Create the full directory path of the current buffer.
                Useful when editing a buffer with a path that does not exist
                yet.
                This can be done with `:Mkdir!` from |eunuch|


                                                                *vimfu-syntax*
:syntax sync fromstart  Reset the syntax highlighting.
                Useful when syntax highlighting seems to go awry.


                                                              *vimfu-quickfix*
:expr []        Clear the quickfix window.


                                                  *vimfu-tdd* *vimfu-map-test*
:map <Leader>t :wall!\|!./vendor/bin/phpunit tests/Some/ThingTest.php<cr>
                Writes all the files in the open buffers and runs 1 specific
                test.
                This comes in handy when doing TDD cycles and you're editing
                the code under test; you can run only the relevant test case
                without shying away from the buffer where you're editing.

 vim:tw=78:ts=8:ft=help:norl:nocindent:et:
